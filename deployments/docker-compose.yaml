version: '3'
services:
  reverse-proxy:
    image: traefik:v2.3
    command:
      - "--entryPoints.web.address=:80"
      - "--api.insecure=true"
      - "--providers.docker"
      - "--providers.docker.exposedbydefault=false"
      - --tracing=true
      - --tracing.jaeger=true
      - --tracing.jaeger.collector.endpoint=http://jaeger:14268/api/traces?format=jaeger.thrift
      - --tracing.jaeger.traceContextHeaderName=uber-trace-id
      - --tracing.jaeger.gen128Bit
      - --tracing.jaeger.samplingParam=1.0
      - --accesslog=true # output log to stdout
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
  web:
    image: minghsu0107/rapid-messenger-web:redis
    restart: always
    expose:
      - "80"
    environment:
      WEB_HTTP_SERVER_PORT: "80"
      OBSERVABILITY_PROMETHEUS_PORT: "8080"
      OBSERVABILITY_TRACING_JAEGERURL: http://jaeger:14268/api/traces
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.rcweb.rule=PathPrefix(`/`)"
      - "traefik.http.routers.rcweb.entrypoints=web"
      - "traefik.http.routers.rcweb.service=rcweb"
      - "traefik.http.services.rcweb.loadbalancer.server.port=80"
  random-chat:
    image: minghsu0107/rapid-messenger-api:redis
    restart: always
    expose:
      - "80"
      - "4000"
    command:
      - chat
    environment:
      CHAT_HTTP_SERVER_PORT: "80"
      CHAT_HTTP_SERVER_MAXCONN: "200"
      CHAT_GRPC_SERVER_PORT: "4000"
      CHAT_MESSAGE_MAXNUM: "500"
      CHAT_MESSAGE_MAXSIZEBYTE: "4096"
      CHAT_JWT_SECRET: ${JWT_SECRET}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_ADDRS: redis-node1:7000,redis-node2:7001,redis-node3:7002,redis-node4:7003,redis-node5:7004,redis-node6:7005
      REDIS_EXPIRATIONHOUR: "24"
      OBSERVABILITY_PROMETHEUS_PORT: "8080"
      OBSERVABILITY_TRACING_JAEGERURL: http://jaeger:14268/api/traces
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.random-chat.rule=PathPrefix(`/api`)"
      - "traefik.http.routers.random-chat.entrypoints=web"
      - "traefik.http.routers.random-chat.service=random-chat"
      - "traefik.http.services.random-chat.loadbalancer.server.port=80"
      - "traefik.http.routers.rapid-messenger-grpc.rule=Headers(`content-type`,`application/grpc`) && Headers(`service-id`, `chat`)"
      - "traefik.http.routers.rapid-messenger-grpc.entrypoints=web"
      - "traefik.http.routers.rapid-messenger-grpc.service=rapid-messenger-grpc"
      - "traefik.http.services.rapid-messenger-grpc.loadbalancer.server.port=4000"
      - "traefik.http.services.rapid-messenger-grpc.loadbalancer.server.scheme=h2c"
  match:
    image: minghsu0107/rapid-messenger-api:redis
    restart: always
    expose:
      - "80"
    command:
      - match
    environment:
      MATCH_HTTP_SERVER_PORT: "80"
      MATCH_HTTP_SERVER_MAXCONN: "200"
      MATCH_GRPC_CLIENT_CHAT_ENDPOINT: "reverse-proxy:80"
      MATCH_GRPC_CLIENT_USER_ENDPOINT: "reverse-proxy:80"
      MATCH_JWT_SECRET: ${JWT_SECRET}
      MATCH_JWT_EXPIRATIONSECOND: "86400"
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_ADDRS: redis-node1:7000,redis-node2:7001,redis-node3:7002,redis-node4:7003,redis-node5:7004,redis-node6:7005
      REDIS_EXPIRATIONHOUR: "24"
      OBSERVABILITY_PROMETHEUS_PORT: "8080"
      OBSERVABILITY_TRACING_JAEGERURL: http://jaeger:14268/api/traces
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.match.rule=PathPrefix(`/api/match`)"
      - "traefik.http.routers.match.entrypoints=web"
      - "traefik.http.routers.match.service=match"
      - "traefik.http.services.match.loadbalancer.server.port=80"
  uploader:
    image: minghsu0107/rapid-messenger-api:redis
    restart: always
    depends_on:
      - minio
    expose:
      - "80"
    command:
      - uploader
    environment:
      UPLOADER_HTTP_SERVER_PORT: "80"
      UPLOADER_HTTP_SERVER_MAXBODYBYTE: "67108864"
      UPLOADER_HTTP_SERVER_MAXMEMORYBYTE: "16777216"
      UPLOADER_S3_ENDPOINT: http://minio:9000
      UPLOADER_S3_DISABLESSL: "true"
      UPLOADER_S3_REGION: us-east-1
      UPLOADER_S3_BUCKET: myfilebucket
      UPLOADER_S3_ACCESSKEY: testaccesskey
      UPLOADER_S3_SECRETKEY: testsecret
      UPLOADER_JWT_SECRET: ${JWT_SECRET}
      OBSERVABILITY_PROMETHEUS_PORT: "8080"
      OBSERVABILITY_TRACING_JAEGERURL: http://jaeger:14268/api/traces
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.uploader.rule=PathPrefix(`/api/file`)"
      - "traefik.http.routers.uploader.entrypoints=web"
      - "traefik.http.routers.uploader.service=uploader"
      - "traefik.http.services.uploader.loadbalancer.server.port=80"
  user:
    image: minghsu0107/rapid-messenger-api:redis
    restart: always
    expose:
      - "80"
    command:
      - user
    environment:
      USER_HTTP_SERVER_PORT: "80"
      USER_GRPC_SERVER_PORT: "4000"
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_ADDRS: redis-node1:7000,redis-node2:7001,redis-node3:7002,redis-node4:7003,redis-node5:7004,redis-node6:7005
      REDIS_EXPIRATIONHOUR: "24"
      OBSERVABILITY_PROMETHEUS_PORT: "8080"
      OBSERVABILITY_TRACING_JAEGERURL: http://jaeger:14268/api/traces
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.user.rule=PathPrefix(`/api/user`)"
      - "traefik.http.routers.user.entrypoints=web"
      - "traefik.http.routers.user.service=user"
      - "traefik.http.services.user.loadbalancer.server.port=80"
      - "traefik.http.routers.user-grpc.rule=Headers(`content-type`,`application/grpc`) && Headers(`service-id`, `user`)"
      - "traefik.http.routers.user-grpc.entrypoints=web"
      - "traefik.http.routers.user-grpc.service=user-grpc"
      - "traefik.http.services.user-grpc.loadbalancer.server.port=4000"
      - "traefik.http.services.user-grpc.loadbalancer.server.scheme=h2c"
  minio:
    image: minio/minio:RELEASE.2021-03-17T02-33-02Z@sha256:d33b2e9559ee59acf7591cd83cb7238837158a316956e6140e6692a8e4e12fe9
    volumes:
      - minio_data:/export
    command: server /export
    environment:
      MINIO_ACCESS_KEY: testaccesskey
      MINIO_SECRET_KEY: testsecret
    ports:
      - "9000:9000"
  createbucket:
    image: minio/mc:RELEASE.2022-07-15T09-20-55Z
    restart: on-failure:5
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      set -e;
      /usr/bin/mc config host add myminio http://minio:9000 testaccesskey testsecret;
      /usr/bin/mc mb myminio/myfilebucket;
      /usr/bin/mc policy set public myminio/myfilebucket;
      exit 0;
      "
  prometheus:
    image: prom/prometheus:v2.25.2
    volumes:
      - ./prometheus/prometheus.yaml:/etc/prometheus/prometheus.yaml
    command: --config.file=/etc/prometheus/prometheus.yaml
    ports:
      - 9090:9090
  jaeger:
    image: jaegertracing/all-in-one:1.22
    ports:
      - 14268:14268
      - 16686:16686
  redis-node1:
    build:
      context: redis
    ports:
      - 7000:7000
      - 17000:17000
    restart: always
    volumes:
      - redis-node1-data:/data
    entrypoint: [redis-server, /etc/redis/rediscluster.conf, --port,"7000", --cluster-announce-ip,"${REDIS_CLUSTER_IP}"]
  redis-node2:
    build:
      context: redis
    ports:
      - 7001:7001
      - 17001:17001
    restart: always
    volumes:
      - redis-node2-data:/data
    entrypoint: [redis-server, /etc/redis/rediscluster.conf,--port,"7001",--cluster-announce-ip,"${REDIS_CLUSTER_IP}"]
  redis-node3:
    build:
      context: redis
    ports:
      - 7002:7002
      - 17002:17002
    restart: always
    volumes:
      - redis-node3-data:/data
    entrypoint: [redis-server, /etc/redis/rediscluster.conf,--port,"7002",--cluster-announce-ip,"${REDIS_CLUSTER_IP}"]
  redis-node4:
    build:
      context: redis
    ports:
      - 7003:7003
      - 17003:17003
    restart: always
    volumes:
      - redis-node4-data:/data
    entrypoint: [redis-server, /etc/redis/rediscluster.conf,--port,"7003",--cluster-announce-ip,"${REDIS_CLUSTER_IP}"]
  redis-node5:
    build:
      context: redis
    ports:
      - 7004:7004
      - 17004:17004
    restart: always
    volumes:
      - redis-node5-data:/data
    entrypoint: [redis-server, /etc/redis/rediscluster.conf,--port,"7004",--cluster-announce-ip,"${REDIS_CLUSTER_IP}"]
  redis-node6:
    build:
      context: redis
    ports:
      - 7005:7005
      - 17005:17005
    restart: always
    volumes:
      - redis-node6-data:/data
    entrypoint: [redis-server, /etc/redis/rediscluster.conf,--port,"7005",--cluster-announce-ip,"${REDIS_CLUSTER_IP}"]
  redis-cluster-creator:
    image: redis:6.2.6
    entrypoint: [/bin/sh,-c,'echo "yes" | redis-cli -a ${REDIS_PASSWORD} --cluster create ${REDIS_CLUSTER_IP}:7000 ${REDIS_CLUSTER_IP}:7001 ${REDIS_CLUSTER_IP}:7002 ${REDIS_CLUSTER_IP}:7003 ${REDIS_CLUSTER_IP}:7004 ${REDIS_CLUSTER_IP}:7005 --cluster-replicas 1']
    depends_on:
      - redis-node1
      - redis-node2
      - redis-node3
      - redis-node4
      - redis-node5
      - redis-node6
volumes:
  minio_data:
  redis-node1-data:
  redis-node2-data:
  redis-node3-data:
  redis-node4-data:
  redis-node5-data:
  redis-node6-data:
